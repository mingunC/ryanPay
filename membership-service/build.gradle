plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.palantir.docker' version '0.35.0'
}

group = "cmgg919.membership"
version = "1.0.0"
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


repositories {
    mavenCentral()
}



dependencies {
    // 버전 명시
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // Springfox is deprecated and not compatible with Spring Boot 3.x
    // Replaced with SpringDoc OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    testImplementation('com.tngtech.archunit:archunit-junit5:1.2.0')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    // 스프링 부트 종속성에 버전 추가
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.4.4'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.4.4'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.4.4'

    // javax.persistence is replaced with jakarta.persistence in Spring Boot 3.x
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.4.4'

    implementation 'org.jetbrains:annotations:24.0.1'


    implementation project(":common") // 공통 모듈 의존성

    // JUnit 4 replaced with JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    // For backward compatibility with JUnit 4 (if needed)
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.0'

    //runtimeOnly 'com.h2database:h2'
    implementation 'com.mysql:mysql-connector-j:8.2.0'
    implementation 'org.springframework.boot:spring-boot-starter'
}
// 메인 클래스 지정 (중요)
springBoot {
    mainClass.set('cmgg919.membership.MembershipApplication')
}
// Palantir Docker 플러그인 설정
docker {
    // 레지스트리/이미지 네임
    name "ryanpay-membership-service:${version}"
    // 프로젝트 루트에 있는 Dockerfile 사용
    dockerfile file("${rootProject.projectDir}/Dockerfile")

    // 반드시 bootJar 태스크의 실제 생성된 JAR 파일을 지정
    files bootJar.archiveFile.get().asFile

    // Dockerfile 안 ARG JAR_FILE 변수에 실제 파일명을 넘김
    buildArgs(['JAR_FILE': bootJar.archiveFile.get().asFile.name])
}

// docker 태스크가 bootJar 에 의존하게 설정
tasks.named("dockerPrepare") {
    dependsOn(tasks.named("bootJar"))
}
